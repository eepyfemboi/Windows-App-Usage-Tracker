"""
THIS IS GENERATED BY CHATGPT WITHOUT ANY REVIEW OR MODIFICATION
YOU REALLY SHOULDNT RUN THIS UNLESS U READ THROUGH IT FIRST
LIKE SERIOUSLY
DONT BLINDLY TRUST AI
"""

import asyncio
import sqlite3
import json
import datetime
import psutil
import aiohttp
import aiohttp.web
from collections import defaultdict

DB_FILE = "app_usage.db"
SERVER_PORT = 33117

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS app_usage (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            active_app TEXT,
            background_apps TEXT
        )
    ''')
    conn.commit()
    conn.close()

def get_applications():
    active_app = None
    background_apps = []
    for proc in psutil.process_iter(['pid', 'name', 'status']):
        try:
            if proc.status() == psutil.STATUS_RUNNING:
                if proc.pid == psutil.Process().ppid():
                    active_app = proc.name()
                else:
                    background_apps.append(proc.name())
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue
    return active_app, list(set(background_apps))

async def record_usage():
    while True:
        timestamp = datetime.datetime.now().isoformat()
        active_app, background_apps = get_applications()
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO app_usage (timestamp, active_app, background_apps) VALUES (?, ?, ?)',
            (timestamp, active_app, json.dumps(background_apps))
        )
        conn.commit()
        conn.close()
        await asyncio.sleep(60)

def get_usage_data():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT timestamp, active_app, background_apps FROM app_usage')
    data = cursor.fetchall()
    conn.close()
    return [
        {"timestamp": row[0], "active_app": row[1], "background_apps": json.loads(row[2])}
        for row in data
    ]

async def handle_get_usage(request):
    return aiohttp.web.json_response(get_usage_data())

async def start_server():
    app = aiohttp.web.Application()
    app.router.add_get('/usage', handle_get_usage)
    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, 'localhost', SERVER_PORT)
    await site.start()
    print(f"Server running on http://localhost:{SERVER_PORT}")

async def main():
    init_db()
    await asyncio.gather(
        record_usage(),
        start_server()
    )

if __name__ == "__main__":
    asyncio.run(main())
